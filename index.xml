<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MSFL on [ MSFL-지식 저장소 ]</title>
    <link>http://ccambo.github.io/</link>
    <description>Recent content in MSFL on [ MSFL-지식 저장소 ]</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-KR</language>
    <lastBuildDate>Tue, 26 Nov 2019 19:25:00 +0900</lastBuildDate>
    
	<atom:link href="http://ccambo.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>댓글 시스템 utterances로 변경</title>
      <link>http://ccambo.github.io/FunnyLab/Blogging/change-comments-to-utterances/</link>
      <pubDate>Mon, 02 Dec 2019 10:25:06 +0900</pubDate>
      
      <guid>http://ccambo.github.io/FunnyLab/Blogging/change-comments-to-utterances/</guid>
      <description>댓글 시스템 변경 기존에 사용하던 Disqus에 딱히 큰 문제가 있었던 것은 아니다.
 Disqus의 댓글 데이터들을 사이트들에 행동패턴등의 Big data 용도로 판매가 이뤄지고 있는 것 같다는 의심들 (차단 또는 정보공유 비활성 설정등으로 가능할 것 같다) Basic Plan인 경우는 Disqus 광고가 많은 자리를 차지한다는 것 (Ads 옵션 조정으로 광고갯수 조정 또는 유료 플랜 사용)  그러나 귀차니즘에 다른 댓글 시스템을 찾아보다가 utterances라는 github issus처럼 댓글을 관리할 수 있는 방법을 발견해서 테스트 겸 변경했다.</description>
    </item>
    
    <item>
      <title>Vue 키 포인트 소개</title>
      <link>http://ccambo.github.io/Dev/Vue/intro_key_of_vue/</link>
      <pubDate>Fri, 29 Nov 2019 15:41:00 +0900</pubDate>
      
      <guid>http://ccambo.github.io/Dev/Vue/intro_key_of_vue/</guid>
      <description>프로젝트에서 사용할 Front-End Framework을 고심하던 중에 Gregg이 Vue.js를 소개하는 공식 자료를 보고 Vue를 선택했다. 아래의 내용은 참고자료에 언급한 원문을 번역하면서 나름대로 정리한 것으로 왜 Vue가 43%의 개발자들이 vue.js를 배우려고 하는지를 알 수 있다.
현재 TOP 3 (Angular, React, Vue)의 자바스크립트들에 대한 비교는 vue.js 공식문서를 참고하면 된다.
 점진적인 프레임워크 Vue는 진입장벽이 낮고, 유연하고, 성능이 우수하고, 유지보수와 테스트가 편한 자바스크립트 프레임워크로 점진적인 프레임워크를 지향  하고 있다. 점진적인 프레임워크라는 것은 웹 어플리케이션 전체를 한꺼번에 하나의 프레임워크 구조로 구조화하지 않아도 일정 부분만 적용 가능  해서 사용자에게 더 좋은 사용자 경험을 제공할 수 있다는 것을 의미한다.</description>
    </item>
    
    <item>
      <title>NPM vs YARN</title>
      <link>http://ccambo.github.io/Dev/Web/npm_vs_yarn/</link>
      <pubDate>Fri, 29 Nov 2019 11:52:00 +0900</pubDate>
      
      <guid>http://ccambo.github.io/Dev/Web/npm_vs_yarn/</guid>
      <description>node + npm이 기본이었는데, 몇 가지 npm의 문제점을 해결하기 위해 yarn이 발표되었다.
기존 NPM은 배포가 쉽고, 종속성을 쉽게 해결할 수 있지만 패키지가 중복으로 설치될 수 있고, 파일이 많은 경우에 문제가 될 수 있다. 페이스북에서는 이런 문제점들을 해결하기 위해서 yarn을 발표했다.
 npm3 보다 패키지 설치 속도가 빠르다. json 포맷을 사용하지 않는다. offline 모드가 가능하다.  YARN 설치  설치페이지를 통해서 직접 설치가 가능하다. 맥북이라면 brew를 이용해서 설치가 가능하다. npm을 통해서도 설치가 가능하다.</description>
    </item>
    
    <item>
      <title>Edge Computing</title>
      <link>http://ccambo.github.io/Cloud/Concepts/edge-computing/</link>
      <pubDate>Wed, 27 Nov 2019 15:55:00 +0900</pubDate>
      
      <guid>http://ccambo.github.io/Cloud/Concepts/edge-computing/</guid>
      <description>엣지 컴퓨팅이란? 클라우드 컴퓨팅이란 인터넷을 통해 서버, 저장소, 소프트웨어, 분석 등의 컴퓨팅 서비스를 제공하는 것을 말한다. 이미 많은 기업들이 클라우드 환경으로 전환했으며, 이 과정에서 여러 가지 문제점들이 발생하게 된다.
 사용자의 폭발적인 증가로 인해 서버 및 데이터 센터에서 처리할 수 있는 데이터 양을 넘어서기 시작하면서 데이터 처리 속도 문제 데이터의 송/수신 과정의 지연 현상 발생 (Latency) 통신 과정 상의 보안 문제  이런 문제점들을 해결하기 위해서 &amp;ldquo;사용자의 단말 또는 가까운 위치에서 컴퓨팅을 수행&amp;rdquo;  하는 방식의 엣지 컴퓨팅 개념이 탄생했다.</description>
    </item>
    
    <item>
      <title>Vue 기본 개념</title>
      <link>http://ccambo.github.io/Dev/Vue/vue/</link>
      <pubDate>Wed, 27 Nov 2019 14:27:00 +0900</pubDate>
      
      <guid>http://ccambo.github.io/Dev/Vue/vue/</guid>
      <description>이 문서는 vue에 대한 빠르고 개략적인 이해를 위해서 간략한 개념만을 정리하고 있다. 따라서 실제 프로젝트에 적용하기 위해서는 참고문서에 지정된 공식문서와 다른 분들이 정리해 놓은 자료들을 참고하도록 한다. 현재 진행 중인 프로젝트에 무사히(?) 적용을 끝내고 나면 그 과정을 기준으로 새로운 정리 문서들을 추가할 예정이다.
 Vue? Vue 가 무엇인가에 대한 것은 Vue 키 포인트 소개 (Gregg 소개 자료)를 참고하면 쉽게 이해할 수 있다.
 현재 Top 3(Angular, React, Vue)에 해당하는 Javascript Framework으로 MVVM(Model-View-ViewModel) 패턴 기반의 UI 라이브러리</description>
    </item>
    
    <item>
      <title>How to Change Users</title>
      <link>http://ccambo.github.io/Git/Tips/how-to-change-users/</link>
      <pubDate>Thu, 21 Nov 2019 17:33:13 +0900</pubDate>
      
      <guid>http://ccambo.github.io/Git/Tips/how-to-change-users/</guid>
      <description>대부분의 경우는 단일 사용자로 Git를 운영하겠지만 다양한 이유에 의해서 Git 사용자를 변경해야 하는 상황이 존재한다.
여기서는 이런 문제를 해결하는 방법에 대해서 알아본다.
발생 상황 git 설치 후에 기본 환경 설정을 했을 것이다.
 git 환경 설정  # 전역 설정인 경우 $ git config --global user.name &amp;#34;user name&amp;#34; $ git config --global user.email &amp;#34;user email&amp;#34; # git 단위 설정인 경우 $ git config user.name &amp;#34;user name&amp;#34; $ git config user.</description>
    </item>
    
    <item>
      <title>What is the submodule</title>
      <link>http://ccambo.github.io/Git/Submdule/what-is-the-submodule/</link>
      <pubDate>Thu, 21 Nov 2019 17:33:13 +0900</pubDate>
      
      <guid>http://ccambo.github.io/Git/Submdule/what-is-the-submodule/</guid>
      <description>아래의 내용은 정리하면서 검증한 부분도 있지만, 검증이 되지 않고 정리된 내용도 있을 수 있으므로, 반드시 관련된 정보를 추가로 검색하여 검증해야 한다.
 Submodule? Git 프로젝트는 하나의 독립된 라이브러리라고 생각할 수 있다. 따라서 특정 프로젝트를 진행할 때 또 다른 프로젝트를 내부적으로 사용해야하는 경우가 빈번하게 발생할 수 있다. 일반적으로 이런 상황에서는 필요한 라이브러리의 특정 버전을 설치하거나 소스를 복사해서 사용하는 방법을 사용하는데 이에 따른 버전관리나 소스의 변경등에 대한 대처가 만만치 않다.
Git와 Submodule을 사용하면 Git Repository 내에 또 다른 독립적인 Repository를 운영하는 구조를 만들 수 있다.</description>
    </item>
    
    <item>
      <title>OGP API 서버 Heroku에 배포하기</title>
      <link>http://ccambo.github.io/FunnyLab/Blogging/how-to-deploy-api-server-to-heroku/</link>
      <pubDate>Mon, 09 Dec 2019 17:56:48 +0900</pubDate>
      
      <guid>http://ccambo.github.io/FunnyLab/Blogging/how-to-deploy-api-server-to-heroku/</guid>
      <description>이 문서는 블로그에서 외부 게시글에 대한 미리보기를 작성하면서 Open Graph를 적용하는 방법을 정리한 것입니다. Hugo나 Hexo를 기준으로 적용하는데 필요한 OGP 처리용 API Server를 구성하는 내용이므로 OGP에 대한 상세한 내용은 아래의 참고 자료를 활용하시기 바랍니다. 기본적인 개발 환경은 이미 활용하는 것으로 가정하고 git / vscode / macbook을 기준으로 설명합니다
 OGP란? 오픈그래프 (Open Graph)는 HTML 메타 태그의 종류 중의 하나로 사용성에 약간의 차이를 가진다. SNS에서 그 개념이 시작되었는데, SNS에 링크를 걸어 놓으면 이 링크가 어떤 데이터를 가지고 있는지를 알 수 있는 방법이 없기 때문에 링크에 대한 미리보기로써 이미지, 설명, 제목등을 나타내기 위한 태그들이다.</description>
    </item>
    
  </channel>
</rss>